#pragma once
#include <chrono>


//---------------------------------------------------------------------------------------------
//自作ファイル




//---------------------------------------------------------------------------------------------

namespace tpr {

	class Coroutine {
	public:

		//=======================================================
		// コンストラクタ
		// 1. 関数アドレス
		// 2. 遅延させる時間
		//=======================================================
		Coroutine(void (_func)(), float _time) :

			func(_func),
			time(_time),
			count(0.0f),
			_delete_flag(false)
		{}

		~Coroutine() {}


		//-------------------------------------------------------------------------------------
		//関数

		void(*func)();

		//=======================================================
		// アップデート(常に呼び出す)
		//=======================================================
		void UpDate(float deltatime);

		//=======================================================
		// 時間計測
		//=======================================================
		bool TimeKeeper(float deltatime);


		//-------------------------------------------------------------------------------------
		//変数

		float time;
		float count;
		bool _delete_flag;
	};
}


//=============================================================================================
//コルーチンクラスの使い方例
//=============================================================================================
/*

//ディレイ後に呼び出す関数
void Func() {}


Coroutine* coroutine = nullptr;

int main(){

	void (*p)() = Func;
	coroutine = new Coroutine(p, 10.0f);

	while(1){

		if (coroutine != nullptr) {
			if (coroutine->_delete_flag) {
				delete coroutine;
				coroutine = nullptr;
			}
			else {
				coroutine->UpDate(deltatime);    //deltatimeは1フレームの時間
			}
		}
	}
}
*/