#pragma once
#include <vector>
#include <list>

//--------------------------------------------------------------------------------------------------
//自作ファイル

#include "Node.h"


//--------------------------------------------------------------------------------------------------

namespace tpr {
	class Astar {
	public:

		//------------------------------------------------------------------------------------------
		//関数

		Astar(std::vector<std::vector<int>> map);
		~Astar();

		//=======================================================
		// Astarの実行
		//=======================================================
		void Astar_Exe();


	private:

		//=======================================================
		// 初期化
		//=======================================================
		void Initialize(Vector2 p_pos, Vector2 e_pos);


		//=======================================================
		// オープン可能なマスか確認
		// 1. オープン予定の二次元配列上の座標
		// 2. ノード二次元配列の各行の先頭アドレス
		// 
		// return true できる　false できない
		//=======================================================
		bool isOpen(Vector2 pos, Node** nodes);


		//=======================================================
		// 経路探索実行
		// 1. ノードの二次元配列
		// 2. ノード二次元配列の各行の先頭アドレス
		// 3. ルートを保存するNodeのlist(最短の道を記録)
		// 
		// return true ゴール発見　false 到達不可(想定してない)
		//=======================================================
		bool AstarPlay(Node** nodes, Node* now, std::vector<Node*>* route);


		//=======================================================
		// オープン済のノードで一番スコアが低いノードを得る
		// 1. オープン済のノード配列
		// 
		// return オープン済のノードで一番スコアが低いノード
		//=======================================================
		Node* GetNextNode(std::vector<Node*>* open_node);


		//------------------------------------------------------------------------------------------
		//変数

		Vector2 start = { 0,0 };
		Vector2 goal = { 0,0 };

		std::vector<Node*> adress_nodes;

		std::vector<std::vector<Node>> nodes;


		//------------------------------------------------------------------------------------------------
		//ステータス

		enum {

			OPEN,
			CLOSE,
			YES,
			NO,
			START,
			GOAL
		};

		//------------------------------------------------------------------------------------------
	};
}